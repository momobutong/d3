<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
	<title>d3 可拖动的地图</title>
</head>
<body>

<script type="text/javascript">
	var width = 1000, height = 800;
	var svg = d3.select("body").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(0, 100)");

	var projection = d3.geo.mercator().center([100, 20]).scale(600).translate([width/2, height/2]);

	var path = d3.geo.path().projection(projection);

	var force = d3.layout.force().size([width, height]);

	var color = d3.scale.category20();

	d3.json("china.geojson", function(error, root){
		if(error) return console.error(error);
		// console.log(root.features);
		var nodes = [];
		var links = [];

		root.features.forEach(function(d, i){
			var centroid = path.centroid(d);
			// console.log(centroid);
			centroid.x = centroid[0];
			centroid.y = centroid[1];
			centroid.feature = d;
			nodes.push(centroid);
		});
		console.log(nodes);
		var triangles = d3.geom.voronoi().triangles(nodes);
		// console.log(triangles);
		triangles.forEach(function(d, i){
			links.push(edge(d[0], d[1]));
			links.push(edge(d[1], d[2]));
			links.push(edge(d[2], d[0]));
		});
		// console.log(links);
		force.gravity(0).charge(0).nodes(nodes).links(links).linkDistance(function(d){
			return d.distance;
		}).start();

		var node = svg.selectAll(".node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) { return "translate(" + -d.x + "," + -d.y + ")"; }).call(force.drag).append("path").attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; }).attr("d", function(d, i){
			return path(d.feature);
		}).attr("fill", function(d, i){
			return color(i);
		}).attr("stroke", "#000");

		var link = svg.selectAll("line").data(links).enter().append("line").attr("class", "link").attr("x1", function(d){
			return d.source.x;
		}).attr("y1", function(d){
			return d.source.y;
		}).attr("x2", function(d){
			return d.target.x;
		}).attr("y2", function(d){
			return d.target.y;
		}).attr("stroke", "steelblue");

		var text = svg.selectAll("text").data(nodes).enter().append("text").text(function(d){
			return d.feature.properties.name;
		}).attr("transform", function(d){
			return "translate("+d.x+", "+d.y+")";
		}).style("font-size", "12px");

		force.on("tick", function(){
			link.attr("x1", function(d){
				return d.source.x;
			}).attr("y1", function(d){
				return d.source.y;
			}).attr("x2", function(d){
				return d.target.x;
			}).attr("y2", function(d){
				return d.target.y;
			});

			node.attr("transform", function(d){
				return "translate("+d.x+", "+d.y+")"
			});

			text.attr("transform", function(d){
				return "translate("+d.x+", "+d.y+")"
			});
		});
	});

	function edge(a, b){
		var dx = a[0] - b[0], dy = a[1] - b[1];
		return {
			source: a,
			target: b,
			distance: Math.sqrt(dx*dx+dy*dy)
		}
	}
</script>
</body>
</html>